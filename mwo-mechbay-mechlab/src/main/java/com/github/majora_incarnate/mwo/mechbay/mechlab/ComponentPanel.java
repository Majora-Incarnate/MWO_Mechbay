package com.github.majora_incarnate.mwo.mechbay.mechlab;

import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.border.TitledBorder;

import com.github.majora_incarnate.mwo.mechbay.entities.Constants;
import com.github.majora_incarnate.mwo.mechbay.entities.Preferences;
import com.github.majora_incarnate.mwo.mechbay.entities.blueprints.*;
import com.github.majora_incarnate.mwo.mechbay.entities.User;
import com.github.majora_incarnate.mwo.mechbay.entities.Variant;
import com.github.majora_incarnate.mwo.mechbay.entities.enums.WeightClass;

/**
 *
 * @author Trevin
 */
public class ComponentPanel extends javax.swing.JPanel {
    private static final long serialVersionUID = 7577995873909787972L;

    /**
     * Creates new form ComponentPanel2
     */
    public ComponentPanel(final Preferences preferences) {
        initComponents(preferences);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents(final Preferences preferences) {
        java.awt.GridBagConstraints gridBagConstraints;

        Label1 = new JLabel();
        Label2 = new JLabel();
        Label3 = new JLabel();
        Label4 = new JLabel();
        Label5 = new JLabel();
        Label6 = new JLabel();

        setBorder(BorderFactory.createTitledBorder(null, "", 4, 2, preferences.DEFAULT_FONT_SIZE_12));
        setAlignmentX(0.0F);
        setAlignmentY(0.0F);
        setFont(preferences.DEFAULT_FONT_SIZE_16);
        setMaximumSize(new java.awt.Dimension(295, 100));
        setMinimumSize(new java.awt.Dimension(295, 100));
        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(295, 100));
        setLayout(new java.awt.GridBagLayout());

        Label1.setFont(preferences.DEFAULT_FONT_SIZE_10);
        Label1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Label1.setAlignmentY(0.0F);
        Label1.setBorder(BorderFactory.createTitledBorder(null, "Something", 4, 2, preferences.DEFAULT_FONT_SIZE_10));
        Label1.setMaximumSize(new java.awt.Dimension(125, 50));
        Label1.setMinimumSize(new java.awt.Dimension(125, 50));
        Label1.setPreferredSize(new java.awt.Dimension(125, 50));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(Label1, gridBagConstraints);

        Label2.setFont(preferences.DEFAULT_FONT_SIZE_10);
        Label2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Label2.setAlignmentY(0.0F);
        Label2.setBorder(BorderFactory.createTitledBorder(null, "Something", 4, 2, preferences.DEFAULT_FONT_SIZE_10));
        Label2.setMaximumSize(new java.awt.Dimension(125, 50));
        Label2.setMinimumSize(new java.awt.Dimension(125, 50));
        Label2.setPreferredSize(new java.awt.Dimension(125, 50));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(Label2, gridBagConstraints);

        Label3.setFont(preferences.DEFAULT_FONT_SIZE_10);
        Label3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Label3.setAlignmentY(0.0F);
        Label3.setBorder(BorderFactory.createTitledBorder(null, "Something", 4, 2, preferences.DEFAULT_FONT_SIZE_10));
        Label3.setMaximumSize(new java.awt.Dimension(125, 50));
        Label3.setMinimumSize(new java.awt.Dimension(125, 50));
        Label3.setPreferredSize(new java.awt.Dimension(125, 50));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(Label3, gridBagConstraints);

        Label4.setFont(preferences.DEFAULT_FONT_SIZE_10);
        Label4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Label4.setAlignmentY(0.0F);
        Label4.setBorder(BorderFactory.createTitledBorder(null, "Something", 4, 2, preferences.DEFAULT_FONT_SIZE_10));
        Label4.setMaximumSize(new java.awt.Dimension(125, 50));
        Label4.setMinimumSize(new java.awt.Dimension(125, 50));
        Label4.setPreferredSize(new java.awt.Dimension(125, 50));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(Label4, gridBagConstraints);

        Label5.setFont(preferences.DEFAULT_FONT_SIZE_10);
        Label5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Label5.setAlignmentY(0.0F);
        Label5.setBorder(BorderFactory.createTitledBorder(null, "Something", 4, 2, preferences.DEFAULT_FONT_SIZE_10));
        Label5.setMaximumSize(new java.awt.Dimension(125, 50));
        Label5.setMinimumSize(new java.awt.Dimension(125, 50));
        Label5.setPreferredSize(new java.awt.Dimension(125, 50));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(Label5, gridBagConstraints);

        Label6.setFont(preferences.DEFAULT_FONT_SIZE_10);
        Label6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Label6.setAlignmentY(0.0F);
        Label6.setBorder(BorderFactory.createTitledBorder(null, "Something", 4, 2, preferences.DEFAULT_FONT_SIZE_10));
        Label6.setMaximumSize(new java.awt.Dimension(125, 50));
        Label6.setMinimumSize(new java.awt.Dimension(125, 50));
        Label6.setPreferredSize(new java.awt.Dimension(125, 50));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(Label6, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    public void setBottomRowUsage(boolean paramBoolean) {
        this.Label5.setEnabled(paramBoolean);
        this.Label6.setEnabled(paramBoolean);
        this.Label5.setVisible(paramBoolean);
        this.Label6.setVisible(paramBoolean);
    }

    public void setLabel(JLabel label, String title, String text) {
        label.setText(text);
        ((TitledBorder) label.getBorder()).setTitle(title);
    }

    public void setArmor(final Variant variant) {
        ((TitledBorder) getBorder()).setTitle("Armor");
        setLabel(this.Label1, "Type", variant.armor.name);
        setLabel(this.Label2, "Cost", String.format("%,d C-Bills", variant.armor.getItemCost(variant.getCurrentArmorTotal())));
        setLabel(this.Label3, "Tonnage", String.format("%.2f tons", variant.armor.getTonnage(variant.getCurrentArmorTotal())));
        setLabel(this.Label4, "Criticals", "" + variant.armor.criticals);
        setBottomRowUsage(false);
    }

    public void setHeatsinks(final Variant variant) {
        ((TitledBorder) getBorder()).setTitle("Heat Sinks");
        setLabel(this.Label1, "Type", variant.heatsinks.name);
        setLabel(this.Label2, "Cost", String.format("%,d C-Bills", variant.heatsinks.getItemCost(variant.currentHeatSinkCount, variant.currentEngineRating)));
        setLabel(this.Label3, "Tonnage", String.format("%.2f tons", variant.heatsinks.getTonnage(variant.currentHeatSinkCount, variant.currentEngineRating)));
        setLabel(this.Label4, "Count", "" + variant.currentHeatSinkCount);
        setBottomRowUsage(true);
        setLabel(this.Label5, "Dissipation", String.format("%.2f hps", 0.0D - variant.heatsinks.getDissipation(variant.currentHeatSinkCount, variant.currentEngineRating)));
        setLabel(this.Label6, "Threshold", String.format("%.2f heat", variant.heatsinks.getThreshold(variant.currentHeatSinkCount)));
    }

    public void setStructure(final Variant variant) {
        ((TitledBorder) getBorder()).setTitle("Structure");
        setLabel(this.Label1, "Type", variant.structure.name);
        setLabel(this.Label2, "Cost", String.format("%,d C-Bills", variant.structure.getItemCost(variant.chassisType.tonnage)));
        setLabel(this.Label3, "Tonnage", String.format("%.2f tons", variant.structure.getTonnage(variant.chassisType.tonnage)));
        setLabel(this.Label4, "Criticals", "" + variant.structure.criticals);
        setBottomRowUsage(false);
    }

    public void setJumpjets(final Variant variant) {
        ((TitledBorder) getBorder()).setTitle("Jump Jets");
        setLabel(this.Label1, "Type", variant.jumpjets.name);
        setLabel(this.Label2, "Cost", String.format("%,d C-Bills", variant.currentJumpJets * variant.jumpjets.getItemCost(variant.chassisType.tonnage)));
        setLabel(this.Label3, "Tonnage", String.format("%.2f tons", variant.currentJumpJets * variant.jumpjets.getBaseTonnage(variant.chassisType.tonnage)));
        setLabel(this.Label4, "Criticals", "" + variant.jumpjets.criticals);
        setBottomRowUsage(false);
    }

    public void setMyomer(MyomerBlueprint blueprint) {
        ((TitledBorder) getBorder()).setTitle("Myomer");
        setBottomRowUsage(false);
    }

    public void setEngine(final Variant variant) {
        ((TitledBorder) getBorder()).setTitle("Engine");
        setLabel(this.Label1, "Type", variant.engine.name);
        setLabel(this.Label2, "Cost", String.format("%,d C-Bills", variant.engine.getCost(variant.currentEngineRating)));
        setLabel(this.Label3, "Tonnage", String.format("%.2f tons", variant.engine.getTonnage(variant.currentEngineRating)));
        setLabel(this.Label4, "Criticals", "" + (variant.engine.centerTorsoCriticals + variant.engine.sideTorsoCriticals));
        setBottomRowUsage(true);
        setLabel(this.Label5, "Engine Rating", "" + variant.currentEngineRating);
        setLabel(this.Label6, "Internal Heat Sink", "" + variant.currentEngineRating / 25);
    }

    public void setCockpit(final Variant variant) {
        ((TitledBorder) getBorder()).setTitle("Cockpit");
        setLabel(this.Label1, "Type", variant.cockpit.name);
        setLabel(this.Label2, "Cost", String.format("%,d C-Bills", variant.cockpit.itemCost));
        setLabel(this.Label3, "Tonnage", String.format("%.2f tons", variant.cockpit.tonnage));
        setLabel(this.Label4, "Criticals", "" + variant.cockpit.criticals);
        setBottomRowUsage(false);
    }

    public void setGyro(final Variant variant) {
        ((TitledBorder) getBorder()).setTitle("Gyro");
        setLabel(this.Label1, "Type", variant.gyro.name);
        setLabel(this.Label2, "Cost", String.format("%,d C-Bills", variant.gyro.getItemCost(variant.currentEngineRating)));
        setLabel(this.Label3, "Tonnage", String.format("%.2f tons", variant.gyro.getTonnage(variant.currentEngineRating)));
        setLabel(this.Label4, "Criticals", "" + variant.gyro.criticals);
        setBottomRowUsage(false);
    }

    public void setSpeedLimits(final User user, double speedModifier, double mascModifier) {
        ((TitledBorder) getBorder()).setTitle("Speed Limits");
        setLabel(this.Label1, "Min Rating", "" + Variant.getMinEngineRating(user, user.variant.chassisType, user.variant.modelType));
        setLabel(this.Label2, "Max Rating", "" + Variant.getMaxEngineRating(user, user.variant.chassisType, user.variant.modelType));
        setLabel(this.Label3, "Min Speed", String.format("%.2f kph", Variant.getMinEngineRating(user, user.variant.chassisType, user.variant.modelType) * speedModifier * mascModifier / user.variant.chassisType.tonnage));
        setLabel(this.Label4, "Max Speed", String.format("%.2f kph", Variant.getMaxEngineRating(user, user.variant.chassisType, user.variant.modelType) * speedModifier * mascModifier / user.variant.chassisType.tonnage));
        setBottomRowUsage(false);
    }

    public void setOverview(final Variant variant) {
        ((TitledBorder) getBorder()).setTitle("Overview");
        setLabel(this.Label1, "Weight", String.format("%.2f kph", variant.chassisType.tonnage));
        setLabel(this.Label2, "Cost (C-Bills)", String.format("%,d C-Bills", variant.modelType.cbillCost));
        setLabel(this.Label3, "Class", WeightClass.enumOf(variant.chassisType.tonnage).toString());
        
        if (variant.modelType.cbillCost != 0L) {
            variant.modelType.mcCost = ((int) (variant.modelType.cbillCost / Constants.CBILL_TO_MC_CONVERSION));
        } else if (variant.modelType.isChampionModel) {
            variant.modelType.mcCost = ((int) (variant.chassisType.tonnage * Constants.CHAMPION_MC_CONVERSION));
        } else if (variant.modelType.isHeroModel) {
            variant.modelType.mcCost = ((int) (variant.chassisType.tonnage * Constants.HERO_MC_CONVERSION));
        } else {
            variant.modelType.mcCost = 0;
        }

        setLabel(this.Label4, "Cost (MC)", String.format("%,d MC", variant.modelType.mcCost));
        setBottomRowUsage(false);
    }

    public void setMovementArchetype(final Variant variant) {
        ((TitledBorder) getBorder()).setTitle("Movement Archetype");
        setLabel(this.Label1, "Type", variant.chassisType.movementArchetype.name);
        setLabel(this.Label2, "", "");
        setLabel(this.Label3, "Max Climb", String.format("%.1f", variant.chassisType.movementArchetype.maxClimbAngle));
        setLabel(this.Label4, "Min Climb", String.format("%.1f", variant.chassisType.movementArchetype.minClimbAngle));
        setBottomRowUsage(false);
    }

    public void setManueverability(final Variant variant) {
        ((TitledBorder) getBorder()).setTitle("Manueverability");
        setLabel(this.Label1, "Acceleration", String.format("%.1f", variant.modelType.acceleration));
        setLabel(this.Label2, "Deceleration", String.format("%.1f", variant.modelType.deceleration));
        setLabel(this.Label3, "Turn Rate", String.format("%.1f", variant.modelType.turnRate));
        setLabel(this.Label4, "Jump Jet Max", "" + variant.maximumJumpJets);
        setBottomRowUsage(false);
    }

    public void setMovementRange(final Variant variant) {
        ((TitledBorder) getBorder()).setTitle("Movement Range");
        setLabel(this.Label1, "Torso Yaw", String.format("%.1f", variant.modelType.movementRanges.get("torso").get("yaw")));
        setLabel(this.Label2, "Torso Pitch", String.format("%.1f", variant.modelType.movementRanges.get("torso").get("pitch")));
        setLabel(this.Label3, "Arm Yaw", String.format("%.1f", variant.modelType.movementRanges.get("arm").get("yaw")));
        setLabel(this.Label4, "Arm Pitch", String.format("%.1f", variant.modelType.movementRanges.get("arm").get("pitch")));
        setBottomRowUsage(false);
    }

    public void setMovementSpeed(final Variant variant) {
        ((TitledBorder) getBorder()).setTitle("Movement Speed");
        setLabel(this.Label1, "Torso Yaw", String.format("%.1f", variant.modelType.movementSpeeds.get("torso").get("yaw")));
        setLabel(this.Label2, "Torso Pitch", String.format("%.1f", variant.modelType.movementSpeeds.get("torso").get("pitch")));
        setLabel(this.Label3, "Arm Yaw", String.format("%.1f", variant.modelType.movementSpeeds.get("arm").get("yaw")));
        setLabel(this.Label4, "Arm Pitch", String.format("%.1f", variant.modelType.movementSpeeds.get("arm").get("pitch")));
        setBottomRowUsage(false);
    }

    public void setSpeedModifiers() {
        ((TitledBorder) getBorder()).setTitle("Speed Modifiers");
        setLabel(this.Label1, "Legged Speed", "0.00 kph");
        setLabel(this.Label2, "Reverse Speed", "0.00 kph");
        setLabel(this.Label3, "Fall Damage", "");
        setLabel(this.Label4, "Fall Threshold", "30 km/h");
        setBottomRowUsage(false);
    }

    public void setTotalHardpoints(int ballistic_count, int energy_count, int missile_count, int ams_count) {
        ((TitledBorder) getBorder()).setTitle("Total Hardpoints");
        setLabel(this.Label1, "Ballistic", "" + ballistic_count);
        setLabel(this.Label2, "Energy", "" + energy_count);
        setLabel(this.Label3, "Missile", "" + missile_count);
        setLabel(this.Label4, "AMS", "" + ams_count);
        setBottomRowUsage(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JLabel Label1;
    private JLabel Label2;
    private JLabel Label3;
    private JLabel Label4;
    private JLabel Label5;
    private JLabel Label6;
    // End of variables declaration//GEN-END:variables
}
