/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.github.majora_incarnate.mwo.mechbay.mechlab;

import com.github.majora_incarnate.mwo.mechbay.entities.Database;
import com.github.majora_incarnate.mwo.mechbay.entities.Preferences;
import com.github.majora_incarnate.mwo.mechbay.entities.Section;
import com.github.majora_incarnate.mwo.mechbay.entities.enums.HardpointType;
import com.github.majora_incarnate.mwo.mechbay.entities.enums.SectionClass;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.HashMap;
import java.util.Map;
import java.util.ResourceBundle;
import javax.swing.AbstractListModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.GroupLayout;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.JToggleButton;

/**
 *
 * @author quicksilver
 */
public class SectionPanel extends javax.swing.JPanel {
    private final Database DATABASE;
    private final Preferences PREFERENCES;
    private final Section SECTION;
    
    private final Map<HardpointType, JLabel> hardpointLabels = new HashMap<>();

    /**
     * Creates new form SectionPanel
     */
    public SectionPanel() {
        this.DATABASE = null;
        this.PREFERENCES = null;
        this.SECTION = null;
        
        initComponents();
    }

    /**
     * Creates new form SectionPanel
     * @param database
     * @param preferences
     * @param section
     */
    public SectionPanel(final Database database, final Preferences preferences, final Section section) {
        this.DATABASE = database;
        this.PREFERENCES = preferences;
        this.SECTION = section;
        
        initComponents();
        
        if (!this.SECTION.hasRearArmor) {
            rearArmorProgressBar.setVisible(false);
            rearArmorProgressBar.setEnabled(false);
        }
        
        if (SectionClass.ARM.equals(this.SECTION.sectionBlueprint.section.sectionClass)) {
            lowerArmToggleButton.setVisible(false);
            lowerArmToggleButton.setEnabled(false);
            handToggleButton.setVisible(false);
            handToggleButton.setEnabled(false);
        }
        
        if (SectionClass.TORSO.equals(this.SECTION.sectionBlueprint.section.sectionClass)) {
            caseToggleButton.setVisible(false);
            caseToggleButton.setEnabled(false);
        }
        
        final GridBagConstraints gridBagConstraints = new GridBagConstraints();
        
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = GridBagConstraints.RELATIVE;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        
        this.SECTION.maximumHardpoints.entrySet().forEach((hardpointEntry) -> {
            final JLabel hardpointLabel = new JLabel();
            
            hardpointLabels.put(hardpointEntry.getKey(), hardpointLabel);
            hardpointPanel.add(hardpointLabel, gridBagConstraints);
        });
    }
    
    public void setMode(final Mode mode) {
        switch(mode) {
            case ARMOR:
                break;
            case EQUIPMENT:
                break;
            case OVERVIEW:
            default:
                break;
        }
    }
    
    public void updateArmorLabels(final int frontArmor) {
        if (SECTION.hasRearArmor) {
            //log error
            return;
        }
    }
    
    public static enum Mode {
        OVERVIEW,
        EQUIPMENT,
        ARMOR
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        GridBagConstraints gridBagConstraints;

        omnipodComboBox = new JComboBox<>();
        hardpointPanel = new JPanel();
        lowerArmToggleButton = new JToggleButton();
        handToggleButton = new JToggleButton();
        structureProgressBar = new JProgressBar();
        frontArmorProgressBar = new JProgressBar();
        rearArmorProgressBar = new JProgressBar();
        criticalList = new JList<>();
        caseToggleButton = new JToggleButton();

        FormListener formListener = new FormListener();

        setMinimumSize(new Dimension(100, 128));
        setName("Form"); // NOI18N
        setPreferredSize(new Dimension(100, 256));
        setLayout(new GridBagLayout());

        omnipodComboBox.setModel(new DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        omnipodComboBox.setMinimumSize(new Dimension(80, 20));
        omnipodComboBox.setName("omnipodComboBox"); // NOI18N
        omnipodComboBox.setPreferredSize(new Dimension(80, 20));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new Insets(5, 5, 5, 5);
        add(omnipodComboBox, gridBagConstraints);

        hardpointPanel.setName("hardpointPanel"); // NOI18N
        hardpointPanel.setLayout(new GridBagLayout());
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new Insets(5, 5, 5, 5);
        add(hardpointPanel, gridBagConstraints);

        ResourceBundle bundle = ResourceBundle.getBundle("com/github/majora_incarnate/mwo/mechbay/mechlab/Bundle"); // NOI18N
        lowerArmToggleButton.setText(bundle.getString("SectionPanel.lowerArmToggleButton.text")); // NOI18N
        lowerArmToggleButton.setMinimumSize(new Dimension(80, 20));
        lowerArmToggleButton.setName("lowerArmToggleButton"); // NOI18N
        lowerArmToggleButton.setPreferredSize(new Dimension(80, 20));
        lowerArmToggleButton.addActionListener(formListener);
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new Insets(5, 5, 5, 5);
        add(lowerArmToggleButton, gridBagConstraints);

        handToggleButton.setText(bundle.getString("SectionPanel.handToggleButton.text")); // NOI18N
        handToggleButton.setMinimumSize(new Dimension(80, 20));
        handToggleButton.setName("handToggleButton"); // NOI18N
        handToggleButton.setPreferredSize(new Dimension(80, 20));
        handToggleButton.addActionListener(formListener);
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new Insets(5, 5, 5, 5);
        add(handToggleButton, gridBagConstraints);

        structureProgressBar.setMinimumSize(new Dimension(80, 20));
        structureProgressBar.setName("structureProgressBar"); // NOI18N
        structureProgressBar.setPreferredSize(new Dimension(80, 20));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new Insets(5, 5, 5, 5);
        add(structureProgressBar, gridBagConstraints);

        frontArmorProgressBar.setMinimumSize(new Dimension(80, 20));
        frontArmorProgressBar.setName("frontArmorProgressBar"); // NOI18N
        frontArmorProgressBar.setPreferredSize(new Dimension(80, 20));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new Insets(5, 5, 5, 5);
        add(frontArmorProgressBar, gridBagConstraints);

        rearArmorProgressBar.setMinimumSize(new Dimension(80, 20));
        rearArmorProgressBar.setName("rearArmorProgressBar"); // NOI18N
        rearArmorProgressBar.setPreferredSize(new Dimension(80, 20));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new Insets(5, 5, 5, 5);
        add(rearArmorProgressBar, gridBagConstraints);

        criticalList.setModel(new AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        criticalList.setMaximumSize(new Dimension(80, 135));
        criticalList.setName("criticalList"); // NOI18N
        criticalList.setPreferredSize(new Dimension(80, 135));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new Insets(5, 5, 5, 5);
        add(criticalList, gridBagConstraints);

        caseToggleButton.setText(bundle.getString("SectionPanel.caseToggleButton.text")); // NOI18N
        caseToggleButton.setMinimumSize(new Dimension(80, 20));
        caseToggleButton.setName("caseToggleButton"); // NOI18N
        caseToggleButton.setPreferredSize(new Dimension(80, 20));
        caseToggleButton.addActionListener(formListener);
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new Insets(5, 5, 5, 5);
        add(caseToggleButton, gridBagConstraints);
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements ActionListener {
        FormListener() {}
        public void actionPerformed(ActionEvent evt) {
            if (evt.getSource() == lowerArmToggleButton) {
                SectionPanel.this.lowerArmToggleButtonActionPerformed(evt);
            }
            else if (evt.getSource() == handToggleButton) {
                SectionPanel.this.handToggleButtonActionPerformed(evt);
            }
            else if (evt.getSource() == caseToggleButton) {
                SectionPanel.this.caseToggleButtonActionPerformed(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents

    private void lowerArmToggleButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_lowerArmToggleButtonActionPerformed
        SECTION.toggleArmActuator(null);
    }//GEN-LAST:event_lowerArmToggleButtonActionPerformed

    private void handToggleButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_handToggleButtonActionPerformed
        SECTION.toggleArmActuator(null);
    }//GEN-LAST:event_handToggleButtonActionPerformed

    private void caseToggleButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_caseToggleButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_caseToggleButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JToggleButton caseToggleButton;
    private JList<String> criticalList;
    private JProgressBar frontArmorProgressBar;
    private JToggleButton handToggleButton;
    private JPanel hardpointPanel;
    private JToggleButton lowerArmToggleButton;
    private JComboBox<String> omnipodComboBox;
    private JProgressBar rearArmorProgressBar;
    private JProgressBar structureProgressBar;
    // End of variables declaration//GEN-END:variables
}
