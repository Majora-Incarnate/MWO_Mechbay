package com.github.majora_incarnate.mwo_mechbay.mechlab;

import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.border.TitledBorder;

import com.github.majora_incarnate.mwo_mechbay.entities.ArmorBlueprint;
import com.github.majora_incarnate.mwo_mechbay.entities.ChassisBlueprint;
import com.github.majora_incarnate.mwo_mechbay.entities.CockpitBlueprint;
import com.github.majora_incarnate.mwo_mechbay.entities.EngineBlueprint;
import com.github.majora_incarnate.mwo_mechbay.entities.GyroBlueprint;
import com.github.majora_incarnate.mwo_mechbay.entities.HeatSinkBlueprint;
import com.github.majora_incarnate.mwo_mechbay.entities.JumpJetBlueprint;
import com.github.majora_incarnate.mwo_mechbay.entities.ModelBlueprint;
import com.github.majora_incarnate.mwo_mechbay.entities.MovementArchetype;
import com.github.majora_incarnate.mwo_mechbay.entities.MyomerBlueprint;
import com.github.majora_incarnate.mwo_mechbay.entities.StructureBlueprint;
import com.github.majora_incarnate.mwo_mechbay.entities.User;
import com.github.majora_incarnate.mwo_mechbay.entities.Variant;
import com.github.majora_incarnate.mwo_mechbay.entities.WeightClass;

/**
 *
 * @author Trevin
 */
public class ComponentPanel extends javax.swing.JPanel {
    private static final long serialVersionUID = 7577995873909787972L;

    /**
     * Creates new form ComponentPanel2
     */
    public ComponentPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        Label1 = new javax.swing.JLabel();
        Label2 = new javax.swing.JLabel();
        Label3 = new javax.swing.JLabel();
        Label4 = new javax.swing.JLabel();
        Label5 = new javax.swing.JLabel();
        Label6 = new javax.swing.JLabel();

        setBorder(BorderFactory.createTitledBorder(null, "", 4, 2, User.preferences.DEFAULT_FONT_SIZE_12));
        setAlignmentX(0.0F);
        setAlignmentY(0.0F);
        setFont(User.preferences.DEFAULT_FONT_SIZE_16);
        setMaximumSize(new java.awt.Dimension(295, 100));
        setMinimumSize(new java.awt.Dimension(295, 100));
        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(295, 100));
        setLayout(new java.awt.GridBagLayout());

        Label1.setFont(User.preferences.DEFAULT_FONT_SIZE_10);
        Label1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Label1.setAlignmentY(0.0F);
        Label1.setBorder(BorderFactory.createTitledBorder(null, "Something", 4, 2, User.preferences.DEFAULT_FONT_SIZE_10));
        Label1.setMaximumSize(new java.awt.Dimension(125, 50));
        Label1.setMinimumSize(new java.awt.Dimension(125, 50));
        Label1.setPreferredSize(new java.awt.Dimension(125, 50));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(Label1, gridBagConstraints);

        Label2.setFont(User.preferences.DEFAULT_FONT_SIZE_10);
        Label2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Label2.setAlignmentY(0.0F);
        Label2.setBorder(BorderFactory.createTitledBorder(null, "Something", 4, 2, User.preferences.DEFAULT_FONT_SIZE_10));
        Label2.setMaximumSize(new java.awt.Dimension(125, 50));
        Label2.setMinimumSize(new java.awt.Dimension(125, 50));
        Label2.setPreferredSize(new java.awt.Dimension(125, 50));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(Label2, gridBagConstraints);

        Label3.setFont(User.preferences.DEFAULT_FONT_SIZE_10);
        Label3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Label3.setAlignmentY(0.0F);
        Label3.setBorder(BorderFactory.createTitledBorder(null, "Something", 4, 2, User.preferences.DEFAULT_FONT_SIZE_10));
        Label3.setMaximumSize(new java.awt.Dimension(125, 50));
        Label3.setMinimumSize(new java.awt.Dimension(125, 50));
        Label3.setPreferredSize(new java.awt.Dimension(125, 50));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(Label3, gridBagConstraints);

        Label4.setFont(User.preferences.DEFAULT_FONT_SIZE_10);
        Label4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Label4.setAlignmentY(0.0F);
        Label4.setBorder(BorderFactory.createTitledBorder(null, "Something", 4, 2, User.preferences.DEFAULT_FONT_SIZE_10));
        Label4.setMaximumSize(new java.awt.Dimension(125, 50));
        Label4.setMinimumSize(new java.awt.Dimension(125, 50));
        Label4.setPreferredSize(new java.awt.Dimension(125, 50));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(Label4, gridBagConstraints);

        Label5.setFont(User.preferences.DEFAULT_FONT_SIZE_10);
        Label5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Label5.setAlignmentY(0.0F);
        Label5.setBorder(BorderFactory.createTitledBorder(null, "Something", 4, 2, User.preferences.DEFAULT_FONT_SIZE_10));
        Label5.setMaximumSize(new java.awt.Dimension(125, 50));
        Label5.setMinimumSize(new java.awt.Dimension(125, 50));
        Label5.setPreferredSize(new java.awt.Dimension(125, 50));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(Label5, gridBagConstraints);

        Label6.setFont(User.preferences.DEFAULT_FONT_SIZE_10);
        Label6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Label6.setAlignmentY(0.0F);
        Label6.setBorder(BorderFactory.createTitledBorder(null, "Something", 4, 2, User.preferences.DEFAULT_FONT_SIZE_10));
        Label6.setMaximumSize(new java.awt.Dimension(125, 50));
        Label6.setMinimumSize(new java.awt.Dimension(125, 50));
        Label6.setPreferredSize(new java.awt.Dimension(125, 50));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(Label6, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    public void Set_Bottom_Row_Usage(boolean paramBoolean) {
        this.Label5.setEnabled(paramBoolean);
        this.Label6.setEnabled(paramBoolean);
        this.Label5.setVisible(paramBoolean);
        this.Label6.setVisible(paramBoolean);
    }

    public void Set_Label(JLabel label, String title, String text) {
        label.setText(text);
        ((TitledBorder) label.getBorder()).setTitle(title);
    }

    public void Set_Armor(ArmorBlueprint blueprint, int paramInt) {
        ((TitledBorder) getBorder()).setTitle("Armor");
        Set_Label(this.Label1, "Type", blueprint.name);
        Set_Label(this.Label2, "Cost", String.format("%,d C-Bills", blueprint.Get_Item_Cost(paramInt)));
        Set_Label(this.Label3, "Tonnage", String.format("%.2f tons", blueprint.Get_Tonnage(paramInt)));
        Set_Label(this.Label4, "Criticals", "" + blueprint.criticals);
        Set_Bottom_Row_Usage(false);
    }

    public void Set_Heatsinks(final HeatSinkBlueprint blueprint, final int heatSinkCount, final int engineRating) {
        ((TitledBorder) getBorder()).setTitle("Heat Sinks");
        Set_Label(this.Label1, "Type", blueprint.name);
        Set_Label(this.Label2, "Cost", String.format("%,d C-Bills", blueprint.Get_Item_Cost(heatSinkCount, engineRating)));
        Set_Label(this.Label3, "Tonnage", String.format("%.2f tons", blueprint.Get_Tonnage(heatSinkCount, engineRating)));
        Set_Label(this.Label4, "Count", "" + heatSinkCount);
        Set_Bottom_Row_Usage(true);
        Set_Label(this.Label5, "Dissipation", String.format("%.2f hps", 0.0D - blueprint.Get_Dissipation(heatSinkCount, engineRating)));
        Set_Label(this.Label6, "Threshold", String.format("%.2f heat", blueprint.Get_Threshold(heatSinkCount)));
    }

    public void Set_Structure(StructureBlueprint blueprint, double tonnage) {
        ((TitledBorder) getBorder()).setTitle("Structure");
        Set_Label(this.Label1, "Type", blueprint.name);
        Set_Label(this.Label2, "Cost", String.format("%,d C-Bills", blueprint.getItemCost(tonnage)));
        Set_Label(this.Label3, "Tonnage", String.format("%.2f tons", blueprint.getTonnage(tonnage)));
        Set_Label(this.Label4, "Criticals", "" + blueprint.criticals);
        Set_Bottom_Row_Usage(false);
    }

    public void Set_Jumpjets(JumpJetBlueprint blueprint, int jump_jet_count, double tonnage) {
        ((TitledBorder) getBorder()).setTitle("Jump Jets");
        Set_Label(this.Label1, "Type", blueprint.name);
        Set_Label(this.Label2, "Cost", String.format("%,d C-Bills", jump_jet_count * blueprint.Get_Item_Cost(tonnage)));
        Set_Label(this.Label3, "Tonnage", String.format("%.2f tons", jump_jet_count * blueprint.Get_Base_Tonnage(tonnage)));
        Set_Label(this.Label4, "Criticals", "" + blueprint.criticals);
        Set_Bottom_Row_Usage(false);
    }

    public void Set_Myomer(MyomerBlueprint blueprint) {
        ((TitledBorder) getBorder()).setTitle("Myomer");
        Set_Bottom_Row_Usage(false);
    }

    public void Set_Engine(EngineBlueprint blueprint, int engine_rating) {
        ((TitledBorder) getBorder()).setTitle("Engine");
        Set_Label(this.Label1, "Type", blueprint.name);
        Set_Label(this.Label2, "Cost", String.format("%,d C-Bills", blueprint.Get_Cost(engine_rating)));
        Set_Label(this.Label3, "Tonnage", String.format("%.2f tons", blueprint.Get_Tonnage(engine_rating)));
        Set_Label(this.Label4, "Criticals", "" + (blueprint.centerTorsoCriticals + blueprint.sideTorsoCriticals));
        Set_Bottom_Row_Usage(true);
        Set_Label(this.Label5, "Engine Rating", "" + engine_rating);
        Set_Label(this.Label6, "Internal Heat Sink", "" + engine_rating / 25);
    }

    public void Set_Cockpit(CockpitBlueprint blueprint) {
        ((TitledBorder) getBorder()).setTitle("Cockpit");
        Set_Label(this.Label1, "Type", blueprint.name);
        Set_Label(this.Label2, "Cost", String.format("%,d C-Bills", blueprint.itemCost));
        Set_Label(this.Label3, "Tonnage", String.format("%.2f tons", blueprint.tonnage));
        Set_Label(this.Label4, "Criticals", "" + blueprint.criticals);
        Set_Bottom_Row_Usage(false);
    }

    public void Set_Gyro(GyroBlueprint blueprint, int engine_rating) {
        ((TitledBorder) getBorder()).setTitle("Gyro");
        Set_Label(this.Label1, "Type", blueprint.name);
        Set_Label(this.Label2, "Cost", String.format("%,d C-Bills", blueprint.Get_Item_Cost(engine_rating)));
        Set_Label(this.Label3, "Tonnage", String.format("%.2f tons", blueprint.Get_Tonnage(engine_rating)));
        Set_Label(this.Label4, "Criticals", "" + blueprint.criticals);
        Set_Bottom_Row_Usage(false);
    }

    public void Set_Speed_Limits(ChassisBlueprint chassisBlueprint, ModelBlueprint modelBlueprint, double speedModifier, double mascModifier) {
        ((TitledBorder) getBorder()).setTitle("Speed Limits");
        Set_Label(this.Label1, "Min Rating", "" + Variant.GetMinEngineRating(chassisBlueprint, modelBlueprint));
        Set_Label(this.Label2, "Max Rating", "" + Variant.GetMaxEngineRating(chassisBlueprint, modelBlueprint));
        Set_Label(this.Label3, "Min Speed", String.format("%.2f kph", Variant.GetMinEngineRating(chassisBlueprint, modelBlueprint) * speedModifier * mascModifier / chassisBlueprint.tonnage));
        Set_Label(this.Label4, "Max Speed", String.format("%.2f kph", Variant.GetMaxEngineRating(chassisBlueprint, modelBlueprint) * speedModifier * mascModifier / chassisBlueprint.tonnage));
        Set_Bottom_Row_Usage(false);
    }

    public void Set_Overview(ChassisBlueprint chassisBlueprint, ModelBlueprint modelBlueprint) {
        ((TitledBorder) getBorder()).setTitle("Overview");
        Set_Label(this.Label1, "Weight", String.format("%.2f kph", chassisBlueprint.tonnage));
        Set_Label(this.Label2, "Cost (C-Bills)", String.format("%,d C-Bills", modelBlueprint.cbillCost));
        
        if (User.variant.chassisType.tonnage > 75.0D) {
            Set_Label(this.Label3, "Class", WeightClass.ASSAULT.toString());
        } else if (User.variant.chassisType.tonnage > 55.0D) {
            Set_Label(this.Label3, "Class", WeightClass.HEAVY.toString());
        } else if (User.variant.chassisType.tonnage > 35.0D) {
            Set_Label(this.Label3, "Class", WeightClass.MEDIUM.toString());
        } else {
            Set_Label(this.Label3, "Class", WeightClass.LIGHT.toString());
        }
        
//        if (User.variant.model_type.cbill_cost != 0L) {
//            User.variant.model_type.mc_cost = ((int) (User.variant.model_type.cbill_cost / 2500L));
//        } else if (User.variant.model_type.champion_model) {
//            User.variant.model_type.mc_cost = ((int) (User.variant.chassis_type.tonnage * 40.0D));
//        } else if (User.variant.model_type.hero_model) {
//            User.variant.model_type.mc_cost = ((int) (User.variant.chassis_type.tonnage * 75.0D));
//        } else {
//            User.variant.model_type.mc_cost = 0;
//        }

        Set_Label(this.Label4, "Cost (MC)", String.format("%,d MC", modelBlueprint.mcCost));
        Set_Bottom_Row_Usage(false);
    }

    public void Set_Modules(ChassisBlueprint chassisBlueprint, ModelBlueprint modelBlueprint, boolean isMastered) {
        ((TitledBorder) getBorder()).setTitle("Modules");
        Set_Label(this.Label1, "Hybrid", "" + (isMastered ? 1 : 0));
        Set_Label(this.Label2, "Mech", "" + modelBlueprint.mechModules);
        Set_Label(this.Label3, "Consumable", "" + modelBlueprint.consumableModules);
        Set_Label(this.Label4, "Weapon", "" + modelBlueprint.weaponModules);
        Set_Bottom_Row_Usage(false);
    }

    public void Set_Movement_Archetype(MovementArchetype archetype) {
        ((TitledBorder) getBorder()).setTitle("Movement Archetype");
        Set_Label(this.Label1, "Type", archetype.name);
        Set_Label(this.Label2, "", "");
        Set_Label(this.Label3, "Max Climb", String.format("%.1f", archetype.max_climb_angle));
        Set_Label(this.Label4, "Min Climb", String.format("%.1f", archetype.min_climb_angle));
        Set_Bottom_Row_Usage(false);
    }

    public void Set_Manueverability(ChassisBlueprint chassisBlueprint, ModelBlueprint modelBlueprint, int numberOfJumpJets) {
        ((TitledBorder) getBorder()).setTitle("Manueverability");
        Set_Label(this.Label1, "Acceleration", String.format("%.1f", modelBlueprint.acceleration * User.kinetic_burst_modifier));
        Set_Label(this.Label2, "Deceleration", String.format("%.1f", modelBlueprint.deceleration * User.hard_brake_modifier));
        Set_Label(this.Label3, "Turn Rate", String.format("%.1f", modelBlueprint.turnRate * User.anchor_turn_modifier));
        Set_Label(this.Label4, "Jump Jet Max", "" + numberOfJumpJets);
        Set_Bottom_Row_Usage(false);
    }

    public void Set_Movement_Range(ChassisBlueprint chassisBlueprint, ModelBlueprint modelBlueprint) {
        ((TitledBorder) getBorder()).setTitle("Movement Range");
        Set_Label(this.Label1, "Torso Yaw", String.format("%.1f", modelBlueprint.movementRanges.get("Torso").get("Yaw") * User.twist_x_modifier));
        Set_Label(this.Label2, "Torso Pitch", String.format("%.1f", modelBlueprint.movementRanges.get("Torso").get("Pitch")));
        Set_Label(this.Label3, "Arm Yaw", String.format("%.1f", modelBlueprint.movementRanges.get("Arm").get("Yaw")));
        Set_Label(this.Label4, "Arm Pitch", String.format("%.1f", modelBlueprint.movementRanges.get("Arm").get("Pitch")));
        Set_Bottom_Row_Usage(false);
    }

    public void Set_Movement_Speed(ChassisBlueprint chassisBlueprint, ModelBlueprint modelBlueprint) {
        ((TitledBorder) getBorder()).setTitle("Movement Speed");
        Set_Label(this.Label1, "Torso Yaw", String.format("%.1f", modelBlueprint.movementSpeeds.get("Torso").get("Yaw") * User.twist_speed_modifier));
        Set_Label(this.Label2, "Torso Pitch", String.format("%.1f", modelBlueprint.movementSpeeds.get("Torso").get("Pitch") * User.twist_speed_modifier));
        Set_Label(this.Label3, "Arm Yaw", String.format("%.1f", modelBlueprint.movementSpeeds.get("Arm").get("Yaw") * User.arm_reflex_modifier));
        Set_Label(this.Label4, "Arm Pitch", String.format("%.1f", modelBlueprint.movementSpeeds.get("Arm").get("Pitch") * User.arm_reflex_modifier));
        Set_Bottom_Row_Usage(false);
    }

    public void Set_Speed_Modifiers() {
        ((TitledBorder) getBorder()).setTitle("Speed Modifiers");
        Set_Label(this.Label1, "Legged Speed", "0.00 kph");
        Set_Label(this.Label2, "Reverse Speed", "0.00 kph");
        Set_Label(this.Label3, "Fall Damage", "");
        Set_Label(this.Label4, "Fall Threshold", "30 km/h");
        Set_Bottom_Row_Usage(false);
    }

    public void Set_Total_Hardpoints(int ballistic_count, int energy_count, int missile_count, int ams_count) {
        ((TitledBorder) getBorder()).setTitle("Total Hardpoints");
        Set_Label(this.Label1, "Ballistic", "" + ballistic_count);
        Set_Label(this.Label2, "Energy", "" + energy_count);
        Set_Label(this.Label3, "Missile", "" + missile_count);
        Set_Label(this.Label4, "AMS", "" + ams_count);
        Set_Bottom_Row_Usage(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Label1;
    private javax.swing.JLabel Label2;
    private javax.swing.JLabel Label3;
    private javax.swing.JLabel Label4;
    private javax.swing.JLabel Label5;
    private javax.swing.JLabel Label6;
    // End of variables declaration//GEN-END:variables
}
