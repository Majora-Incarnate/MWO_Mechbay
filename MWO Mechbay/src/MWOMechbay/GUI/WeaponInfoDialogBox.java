/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package MWOMechbay.GUI;

import MWOMechbay.Components.Weapons.Weapon;
import MWOMechbay.Mechs.MechCommon;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.WindowConstants;
import javax.swing.border.TitledBorder;

/**
 *
 * @author Nemesis
 */
public class WeaponInfoDialogBox extends javax.swing.JDialog implements MechCommon
{
    String temp;
    
    public WeaponInfoDialogBox(java.awt.Frame parent, boolean modal, Weapon weapon)
    {
        super(parent, modal);
        initComponents();
        temp = String.format("%,d C-Bills", weapon.getCost());
        costLabel.setText(temp);
        criticalsLabel.setText("" + weapon.getCriticals());
        temp = String.format("%.2f", weapon.getDamage());
        damageLabel.setText(temp);
        temp = String.format("%.2f", weapon.getDamagePerSecond());
        damagePerSecondLabel.setText(temp);
        temp = String.format("%.2f sec", weapon.getDelay());
        delayLabel.setText(temp);
        temp = String.format("%.2f sec", weapon.getDuration());
        durationLabel.setText(temp);
        temp = String.format("%.2f", weapon.getHeat());
        heatLabel.setText(temp);
        temp = String.format("%.2f", weapon.getHeatPerSecond());
        heatPerSecondLabel.setText(temp);
        temp = String.format("%.2f", weapon.getHeatToTarget());
        heatToTargetLabel.setText(temp);
        temp = String.format("%.2f", weapon.getKnock());
        knockLabel.setText(temp);
        maxRangeLabel.setText("" + weapon.getMaximumRange());
        minRangeLabel.setText("" + weapon.getMinimumRange());
        projectileCountLabel.setText("" + weapon.getProjectileCount());
        rangeLabel.setText("" + weapon.getRange());
        temp = String.format("%.2f sec", weapon.getRecycle());
        recycleLabel.setText(temp);
        speedLabel.setText("" + weapon.getVelocity());
        temp = String.format("%.2f", weapon.getSpread());
        spreadLabel.setText(temp);
        temp = String.format("%.2f Tons", weapon.getTonnage());
        tonnageLabel.setText(temp);
        weaponNameLabel.setText(weapon.getFullName());
        switch (weapon.getHardpointType())
        {
            case BALLISTIC:
                temp = "Ballistc";
                break;
            case ENERGY:
                temp = "Energy";
                break;
            case MISSILE:
                temp = "Missile";
                break;
            default:
                temp = "Unknown";
                break;
        }
        hardpointTypeLabel.setText(temp);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        GridBagConstraints gridBagConstraints;

        weaponNameLabel = new JLabel();
        hardpointTypeLabel = new JLabel();
        criticalsLabel = new JLabel();
        tonnageLabel = new JLabel();
        damageLabel = new JLabel();
        heatLabel = new JLabel();
        recycleLabel = new JLabel();
        minRangeLabel = new JLabel();
        rangeLabel = new JLabel();
        maxRangeLabel = new JLabel();
        durationLabel = new JLabel();
        speedLabel = new JLabel();
        knockLabel = new JLabel();
        heatToTargetLabel = new JLabel();
        delayLabel = new JLabel();
        costLabel = new JLabel();
        spreadLabel = new JLabel();
        projectileCountLabel = new JLabel();
        damagePerSecondLabel = new JLabel();
        heatPerSecondLabel = new JLabel();
        closeButton = new JButton();

        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        setName("Weapon Info"); // NOI18N
        setResizable(false);
        GridBagLayout layout = new GridBagLayout();
        layout.columnWidths = new int[] {0, 90, 0};
        layout.rowHeights = new int[] {0, 45, 0};
        getContentPane().setLayout(layout);

        weaponNameLabel.setFont(new Font("Moire", 0, 18)); // NOI18N
        weaponNameLabel.setText("Particle Projection Cannon (PPC)");
        weaponNameLabel.setToolTipText("Name of the weapon");
        weaponNameLabel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Weapon Name", TitledBorder.LEADING, TitledBorder.TOP, new Font("Moire", 0, 10))); // NOI18N
        weaponNameLabel.setMaximumSize(new Dimension(600, 60));
        weaponNameLabel.setMinimumSize(new Dimension(600, 60));
        weaponNameLabel.setPreferredSize(new Dimension(600, 60));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(weaponNameLabel, gridBagConstraints);

        hardpointTypeLabel.setFont(new Font("Moire", 0, 12)); // NOI18N
        hardpointTypeLabel.setText("Energy");
        hardpointTypeLabel.setToolTipText("Hardpoint type this weapon can occupy");
        hardpointTypeLabel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Hardpoint Type", TitledBorder.LEADING, TitledBorder.TOP, new Font("Moire", 0, 10))); // NOI18N
        hardpointTypeLabel.setMaximumSize(new Dimension(120, 60));
        hardpointTypeLabel.setMinimumSize(new Dimension(120, 60));
        hardpointTypeLabel.setPreferredSize(new Dimension(120, 60));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(hardpointTypeLabel, gridBagConstraints);

        criticalsLabel.setFont(new Font("Moire", 0, 12)); // NOI18N
        criticalsLabel.setText("3");
        criticalsLabel.setToolTipText("Amount of criticals this weapon takes up and is required to mount");
        criticalsLabel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Criticals", TitledBorder.LEADING, TitledBorder.TOP, new Font("Moire", 0, 10))); // NOI18N
        criticalsLabel.setMaximumSize(new Dimension(120, 60));
        criticalsLabel.setMinimumSize(new Dimension(120, 60));
        criticalsLabel.setPreferredSize(new Dimension(120, 60));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(criticalsLabel, gridBagConstraints);

        tonnageLabel.setFont(new Font("Moire", 0, 12)); // NOI18N
        tonnageLabel.setText("7.0");
        tonnageLabel.setToolTipText("Tonnage of the weapon");
        tonnageLabel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Tonnage", TitledBorder.LEADING, TitledBorder.TOP, new Font("Moire", 0, 10))); // NOI18N
        tonnageLabel.setMaximumSize(new Dimension(120, 60));
        tonnageLabel.setMinimumSize(new Dimension(120, 60));
        tonnageLabel.setPreferredSize(new Dimension(120, 60));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(tonnageLabel, gridBagConstraints);

        damageLabel.setFont(new Font("Moire", 0, 12)); // NOI18N
        damageLabel.setText("10.0");
        damageLabel.setToolTipText("Damage the weapon can do if all projectiles hit");
        damageLabel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Damage", TitledBorder.LEADING, TitledBorder.TOP, new Font("Moire", 0, 10))); // NOI18N
        damageLabel.setMaximumSize(new Dimension(120, 60));
        damageLabel.setMinimumSize(new Dimension(120, 60));
        damageLabel.setPreferredSize(new Dimension(120, 60));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(damageLabel, gridBagConstraints);

        heatLabel.setFont(new Font("Moire", 0, 12)); // NOI18N
        heatLabel.setText("9.0");
        heatLabel.setToolTipText("Heat generated by the weapon for each trigger pull");
        heatLabel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Heat", TitledBorder.LEADING, TitledBorder.TOP, new Font("Moire", 0, 10))); // NOI18N
        heatLabel.setMaximumSize(new Dimension(120, 60));
        heatLabel.setMinimumSize(new Dimension(120, 60));
        heatLabel.setPreferredSize(new Dimension(120, 60));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(heatLabel, gridBagConstraints);

        recycleLabel.setFont(new Font("Moire", 0, 12)); // NOI18N
        recycleLabel.setText("3.0 sec");
        recycleLabel.setToolTipText("Amount of time it takes for the weapon to recharge/reload");
        recycleLabel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Recycle", TitledBorder.LEADING, TitledBorder.TOP, new Font("Moire", 0, 10))); // NOI18N
        recycleLabel.setMaximumSize(new Dimension(120, 60));
        recycleLabel.setMinimumSize(new Dimension(120, 60));
        recycleLabel.setPreferredSize(new Dimension(120, 60));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(recycleLabel, gridBagConstraints);

        minRangeLabel.setFont(new Font("Moire", 0, 12)); // NOI18N
        minRangeLabel.setText("90m");
        minRangeLabel.setToolTipText("Minimum range of the weapon, any shots below this range do minimal to no damage");
        minRangeLabel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Minimum Range", TitledBorder.LEADING, TitledBorder.TOP, new Font("Moire", 0, 10))); // NOI18N
        minRangeLabel.setMaximumSize(new Dimension(120, 60));
        minRangeLabel.setMinimumSize(new Dimension(120, 60));
        minRangeLabel.setPreferredSize(new Dimension(120, 60));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(minRangeLabel, gridBagConstraints);

        rangeLabel.setFont(new Font("Moire", 0, 12)); // NOI18N
        rangeLabel.setText("540m");
        rangeLabel.setToolTipText("Range at which the weapon can do the full listed damage");
        rangeLabel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Range", TitledBorder.LEADING, TitledBorder.TOP, new Font("Moire", 0, 10))); // NOI18N
        rangeLabel.setMaximumSize(new Dimension(120, 60));
        rangeLabel.setMinimumSize(new Dimension(120, 60));
        rangeLabel.setPreferredSize(new Dimension(120, 60));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(rangeLabel, gridBagConstraints);

        maxRangeLabel.setFont(new Font("Moire", 0, 12)); // NOI18N
        maxRangeLabel.setText("2160m");
        maxRangeLabel.setToolTipText("Maximum range the weapon can hit a target and still do some amount of damage");
        maxRangeLabel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Maximum Range", TitledBorder.LEADING, TitledBorder.TOP, new Font("Moire", 0, 10))); // NOI18N
        maxRangeLabel.setMaximumSize(new Dimension(120, 60));
        maxRangeLabel.setMinimumSize(new Dimension(120, 60));
        maxRangeLabel.setPreferredSize(new Dimension(120, 60));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(maxRangeLabel, gridBagConstraints);

        durationLabel.setFont(new Font("Moire", 0, 12)); // NOI18N
        durationLabel.setText("N/A");
        durationLabel.setToolTipText("Duration of the firing sequence, only applies to lasers and flamers");
        durationLabel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Duration", TitledBorder.LEADING, TitledBorder.TOP, new Font("Moire", 0, 10))); // NOI18N
        durationLabel.setMaximumSize(new Dimension(120, 60));
        durationLabel.setMinimumSize(new Dimension(120, 60));
        durationLabel.setPreferredSize(new Dimension(120, 60));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(durationLabel, gridBagConstraints);

        speedLabel.setFont(new Font("Moire", 0, 12)); // NOI18N
        speedLabel.setText("1200");
        speedLabel.setToolTipText("Velocity of the weapon's projectiles");
        speedLabel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Velocity", TitledBorder.LEADING, TitledBorder.TOP, new Font("Moire", 0, 10))); // NOI18N
        speedLabel.setMaximumSize(new Dimension(120, 60));
        speedLabel.setMinimumSize(new Dimension(120, 60));
        speedLabel.setPreferredSize(new Dimension(120, 60));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(speedLabel, gridBagConstraints);

        knockLabel.setFont(new Font("Moire", 0, 12)); // NOI18N
        knockLabel.setText("1.0");
        knockLabel.setToolTipText("How much cockpit 'knock' the target sustains on a successful hit, also known as impulse");
        knockLabel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "'Knock' (Impulse)", TitledBorder.LEADING, TitledBorder.TOP, new Font("Moire", 0, 10))); // NOI18N
        knockLabel.setMaximumSize(new Dimension(120, 60));
        knockLabel.setMinimumSize(new Dimension(120, 60));
        knockLabel.setPreferredSize(new Dimension(120, 60));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(knockLabel, gridBagConstraints);

        heatToTargetLabel.setFont(new Font("Moire", 0, 12)); // NOI18N
        heatToTargetLabel.setText("N/A");
        heatToTargetLabel.setToolTipText("Heat the target generates on a successful hit");
        heatToTargetLabel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Heat To Target", TitledBorder.LEADING, TitledBorder.TOP, new Font("Moire", 0, 10))); // NOI18N
        heatToTargetLabel.setMaximumSize(new Dimension(120, 60));
        heatToTargetLabel.setMinimumSize(new Dimension(120, 60));
        heatToTargetLabel.setPreferredSize(new Dimension(120, 60));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(heatToTargetLabel, gridBagConstraints);

        delayLabel.setFont(new Font("Moire", 0, 12)); // NOI18N
        delayLabel.setText("N/A");
        delayLabel.setToolTipText("Delay between trigger pull and projectile launch");
        delayLabel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Firing Delay", TitledBorder.LEADING, TitledBorder.TOP, new Font("Moire", 0, 10))); // NOI18N
        delayLabel.setMaximumSize(new Dimension(120, 60));
        delayLabel.setMinimumSize(new Dimension(120, 60));
        delayLabel.setPreferredSize(new Dimension(120, 60));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(delayLabel, gridBagConstraints);

        costLabel.setFont(new Font("Moire", 0, 12)); // NOI18N
        costLabel.setText("200,000 C-Bills");
        costLabel.setToolTipText("Cost of the weapon");
        costLabel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Cost", TitledBorder.LEADING, TitledBorder.TOP, new Font("Moire", 0, 10))); // NOI18N
        costLabel.setMaximumSize(new Dimension(120, 60));
        costLabel.setMinimumSize(new Dimension(120, 60));
        costLabel.setPreferredSize(new Dimension(120, 60));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(costLabel, gridBagConstraints);

        spreadLabel.setFont(new Font("Moire", 0, 12)); // NOI18N
        spreadLabel.setText("N/A");
        spreadLabel.setToolTipText("How much the projectiles scatter, comparitive to Borderlands.");
        spreadLabel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Spread", TitledBorder.LEADING, TitledBorder.TOP, new Font("Moire", 0, 10))); // NOI18N
        spreadLabel.setMaximumSize(new Dimension(120, 60));
        spreadLabel.setMinimumSize(new Dimension(120, 60));
        spreadLabel.setPreferredSize(new Dimension(120, 60));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(spreadLabel, gridBagConstraints);

        projectileCountLabel.setFont(new Font("Moire", 0, 12)); // NOI18N
        projectileCountLabel.setText("1");
        projectileCountLabel.setToolTipText("How many projectiles this weapon fires per trigger pull");
        projectileCountLabel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Projectile Count", TitledBorder.LEADING, TitledBorder.TOP, new Font("Moire", 0, 10))); // NOI18N
        projectileCountLabel.setMaximumSize(new Dimension(120, 60));
        projectileCountLabel.setMinimumSize(new Dimension(120, 60));
        projectileCountLabel.setPreferredSize(new Dimension(120, 60));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(projectileCountLabel, gridBagConstraints);

        damagePerSecondLabel.setFont(new Font("Moire", 0, 12)); // NOI18N
        damagePerSecondLabel.setText("3.33");
        damagePerSecondLabel.setToolTipText("How much damage the weapon can potentially do per second");
        damagePerSecondLabel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Damage Per Second", TitledBorder.LEADING, TitledBorder.TOP, new Font("Moire", 0, 10))); // NOI18N
        damagePerSecondLabel.setMaximumSize(new Dimension(120, 60));
        damagePerSecondLabel.setMinimumSize(new Dimension(120, 60));
        damagePerSecondLabel.setPreferredSize(new Dimension(120, 60));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(damagePerSecondLabel, gridBagConstraints);

        heatPerSecondLabel.setFont(new Font("Moire", 0, 12)); // NOI18N
        heatPerSecondLabel.setText("3.0");
        heatPerSecondLabel.setToolTipText("How much heat the weapon potentially generates per second");
        heatPerSecondLabel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Heat Per Second", TitledBorder.LEADING, TitledBorder.TOP, new Font("Moire", 0, 10))); // NOI18N
        heatPerSecondLabel.setMaximumSize(new Dimension(120, 60));
        heatPerSecondLabel.setMinimumSize(new Dimension(120, 60));
        heatPerSecondLabel.setPreferredSize(new Dimension(120, 60));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(heatPerSecondLabel, gridBagConstraints);

        closeButton.setFont(new Font("Moire", 0, 12)); // NOI18N
        closeButton.setText("Close");
        closeButton.setMaximumSize(new Dimension(120, 30));
        closeButton.setMinimumSize(new Dimension(120, 30));
        closeButton.setPreferredSize(new Dimension(120, 30));
        closeButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(closeButton, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        dispose();
    }//GEN-LAST:event_closeButtonActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    JButton closeButton;
    JLabel costLabel;
    JLabel criticalsLabel;
    JLabel damageLabel;
    JLabel damagePerSecondLabel;
    JLabel delayLabel;
    JLabel durationLabel;
    JLabel hardpointTypeLabel;
    JLabel heatLabel;
    JLabel heatPerSecondLabel;
    JLabel heatToTargetLabel;
    JLabel knockLabel;
    JLabel maxRangeLabel;
    JLabel minRangeLabel;
    JLabel projectileCountLabel;
    JLabel rangeLabel;
    JLabel recycleLabel;
    JLabel speedLabel;
    JLabel spreadLabel;
    JLabel tonnageLabel;
    JLabel weaponNameLabel;
    // End of variables declaration//GEN-END:variables
}
