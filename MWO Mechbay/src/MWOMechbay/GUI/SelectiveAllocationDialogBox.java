package MWOMechbay.GUI;

import MWOMechbay.Components.Item;
import MWOMechbay.Mechs.MechCommon;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Vector;
import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 *
 * @author Quicksilver
 */
public class SelectiveAllocationDialogBox extends javax.swing.JDialog implements MechCommon {
    private Vector<Item>[] items;
    private Item item;
    private int itemTotal;
    private int itemLimit;
    private int k;
    private int[] itemCount = new int[NUMBER_OF_CRITICAL_SECTIONS];
    private int[] sectionLimits;
    private int[] criticals;
    private MechlabForm nParent;
    private CompactMechlabForm Parent;
    
    public SelectiveAllocationDialogBox(MechlabForm parent, boolean modal, Vector<Item>[] userItems, int[] userCriticals, Item userItem, int itemAmount, int index) {
        super(parent, modal);
        nParent = parent;
        items = userItems;
        item = userItem;
        itemLimit = itemAmount;
        k = index;
        itemTotal = 0;
        for (int i = 0; i < NUMBER_OF_CRITICAL_SECTIONS; i++)
            itemCount[i] = 0;
        criticals = userCriticals;
        sectionLimits = (int[])userCriticals.clone();
        System.arraycopy(userCriticals, 0, sectionLimits, 0, userCriticals.length);
        for (int i = 0; i < NUMBER_OF_CRITICAL_SECTIONS; i++)
            sectionLimits[i] /= item.getCriticals();
        
        initComponents();
        
        headSpinner.setModel(new javax.swing.SpinnerNumberModel( 0, 0, sectionLimits[HEAD], 1 ));
        centerTorsoSpinner.setModel(new javax.swing.SpinnerNumberModel( 0, 0, sectionLimits[CENTER_TORSO], 1 ));
        rightTorsoSpinner.setModel(new javax.swing.SpinnerNumberModel( 0, 0, sectionLimits[RIGHT_TORSO], 1 ));
        leftTorsoSpinner.setModel(new javax.swing.SpinnerNumberModel( 0, 0, sectionLimits[LEFT_TORSO], 1 ));
        rightArmSpinner.setModel(new javax.swing.SpinnerNumberModel( 0, 0, sectionLimits[RIGHT_ARM], 1 ));
        leftArmSpinner.setModel(new javax.swing.SpinnerNumberModel( 0, 0, sectionLimits[LEFT_ARM], 1 ));
        rightLegSpinner.setModel(new javax.swing.SpinnerNumberModel( 0, 0, sectionLimits[RIGHT_LEG], 1 ));
        leftLegSpinner.setModel(new javax.swing.SpinnerNumberModel( 0, 0, sectionLimits[LEFT_LEG], 1 ));
    }
    public SelectiveAllocationDialogBox(CompactMechlabForm parent, boolean modal, Vector<Item>[] userItems, int[] userCriticals, Item userItem, int itemAmount, int index) {
        super(parent, modal);
        Parent = parent;
        items = userItems;
        item = userItem;
        itemLimit = itemAmount;
        k = index;
        itemTotal = 0;
        for (int i = 0; i < NUMBER_OF_CRITICAL_SECTIONS; i++)
            itemCount[i] = 0;
        criticals = userCriticals;
        sectionLimits = (int[])userCriticals.clone();
        System.arraycopy(userCriticals, 0, sectionLimits, 0, userCriticals.length);
        for (int i = 0; i < NUMBER_OF_CRITICAL_SECTIONS; i++)
            sectionLimits[i] /= item.getCriticals();
        
        initComponents();
        
        headSpinner.setModel(new javax.swing.SpinnerNumberModel( 0, 0, sectionLimits[HEAD], 1 ));
        centerTorsoSpinner.setModel(new javax.swing.SpinnerNumberModel( 0, 0, sectionLimits[CENTER_TORSO], 1 ));
        rightTorsoSpinner.setModel(new javax.swing.SpinnerNumberModel( 0, 0, sectionLimits[RIGHT_TORSO], 1 ));
        leftTorsoSpinner.setModel(new javax.swing.SpinnerNumberModel( 0, 0, sectionLimits[LEFT_TORSO], 1 ));
        rightArmSpinner.setModel(new javax.swing.SpinnerNumberModel( 0, 0, sectionLimits[RIGHT_ARM], 1 ));
        leftArmSpinner.setModel(new javax.swing.SpinnerNumberModel( 0, 0, sectionLimits[LEFT_ARM], 1 ));
        rightLegSpinner.setModel(new javax.swing.SpinnerNumberModel( 0, 0, sectionLimits[RIGHT_LEG], 1 ));
        leftLegSpinner.setModel(new javax.swing.SpinnerNumberModel( 0, 0, sectionLimits[LEFT_LEG], 1 ));
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        GridBagConstraints gridBagConstraints;

        buttonPanel = new JPanel();
        okButton = new JButton();
        cancelButton = new JButton();
        titlePanel = new JPanel();
        allocatedEquipmentLabel = new JLabel();
        allocatedTotalLabel = new JLabel();
        allocationPanel = new JPanel();
        headPanel = new JPanel();
        headSpinner = new JSpinner();
        headLabel = new JLabel();
        centerTorsoPanel = new JPanel();
        centerTorsoSpinner = new JSpinner();
        centerTorsoLabel = new JLabel();
        rightLegPanel = new JPanel();
        rightLegSpinner = new JSpinner();
        rightLegLabel = new JLabel();
        leftArmPanel = new JPanel();
        leftArmSpinner = new JSpinner();
        leftArmLabel = new JLabel();
        leftLegPanel = new JPanel();
        leftLegSpinner = new JSpinner();
        leftLegLabel = new JLabel();
        rightArmPanel = new JPanel();
        rightArmSpinner = new JSpinner();
        rightArmLabel = new JLabel();
        rightTorsoPanel = new JPanel();
        rightTorsoSpinner = new JSpinner();
        rightTorsoLabel = new JLabel();
        leftTorsoPanel = new JPanel();
        leftTorsoSpinner = new JSpinner();
        leftTorsoLabel = new JLabel();

        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Selective Allocation");
        setMinimumSize(new Dimension(300, 300));
        setName("Selective Dialog Box"); // NOI18N
        setResizable(false);
        getContentPane().setLayout(new GridBagLayout());

        buttonPanel.setFont(new Font("Moire", 0, 11)); // NOI18N
        buttonPanel.setMaximumSize(new Dimension(300, 60));
        buttonPanel.setMinimumSize(new Dimension(300, 60));
        buttonPanel.setPreferredSize(new Dimension(300, 60));
        buttonPanel.setLayout(new GridBagLayout());

        okButton.setFont(new Font("Moire", 0, 11)); // NOI18N
        okButton.setText("OK");
        okButton.setDefaultCapable(false);
        okButton.setMargin(new Insets(0, 0, 0, 0));
        okButton.setMaximumSize(new Dimension(60, 20));
        okButton.setMinimumSize(new Dimension(60, 20));
        okButton.setPreferredSize(new Dimension(60, 20));
        okButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new Insets(15, 0, 15, 0);
        buttonPanel.add(okButton, gridBagConstraints);
        getRootPane().setDefaultButton(okButton);

        cancelButton.setFont(new Font("Moire", 0, 11)); // NOI18N
        cancelButton.setText("Cancel");
        cancelButton.setDefaultCapable(false);
        cancelButton.setMargin(new Insets(0, 0, 0, 0));
        cancelButton.setMaximumSize(new Dimension(60, 20));
        cancelButton.setMinimumSize(new Dimension(60, 20));
        cancelButton.setPreferredSize(new Dimension(60, 20));
        cancelButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new Insets(15, 0, 15, 0);
        buttonPanel.add(cancelButton, gridBagConstraints);

        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        getContentPane().add(buttonPanel, gridBagConstraints);

        titlePanel.setFont(new Font("Moire", 0, 11)); // NOI18N
        titlePanel.setMaximumSize(new Dimension(300, 60));
        titlePanel.setMinimumSize(new Dimension(300, 60));
        titlePanel.setPreferredSize(new Dimension(300, 60));
        titlePanel.setLayout(new GridBagLayout());

        allocatedEquipmentLabel.setFont(new Font("Moire", 0, 11)); // NOI18N
        allocatedEquipmentLabel.setHorizontalAlignment(SwingConstants.CENTER);
        allocatedEquipmentLabel.setText("Allocating " + item.toString());
        allocatedEquipmentLabel.setMaximumSize(new Dimension(150, 20));
        allocatedEquipmentLabel.setMinimumSize(new Dimension(150, 20));
        allocatedEquipmentLabel.setPreferredSize(new Dimension(150, 20));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        titlePanel.add(allocatedEquipmentLabel, gridBagConstraints);

        allocatedTotalLabel.setFont(new Font("Moire", 0, 11)); // NOI18N
        allocatedTotalLabel.setHorizontalAlignment(SwingConstants.CENTER);
        allocatedTotalLabel.setText(itemTotal + " of " + itemLimit + " Allocated");
        allocatedTotalLabel.setMaximumSize(new Dimension(150, 20));
        allocatedTotalLabel.setMinimumSize(new Dimension(150, 20));
        allocatedTotalLabel.setPreferredSize(new Dimension(150, 20));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        titlePanel.add(allocatedTotalLabel, gridBagConstraints);

        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        getContentPane().add(titlePanel, gridBagConstraints);

        allocationPanel.setMaximumSize(new Dimension(300, 180));
        allocationPanel.setMinimumSize(new Dimension(300, 180));
        allocationPanel.setPreferredSize(new Dimension(300, 180));
        allocationPanel.setLayout(new GridBagLayout());

        headPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "HD", TitledBorder.CENTER, TitledBorder.TOP, new Font("Moire", 0, 11))); // NOI18N
        headPanel.setFont(new Font("Moire", 0, 11)); // NOI18N
        headPanel.setMaximumSize(new Dimension(60, 60));
        headPanel.setMinimumSize(new Dimension(60, 60));
        headPanel.setPreferredSize(new Dimension(60, 60));
        headPanel.setLayout(new GridBagLayout());

        headSpinner.setFont(new Font("Moire", 0, 10)); // NOI18N
        headSpinner.setAlignmentX(0.0F);
        headSpinner.setAlignmentY(0.0F);
        headSpinner.setMaximumSize(new Dimension(50, 20));
        headSpinner.setMinimumSize(new Dimension(50, 20));
        headSpinner.setPreferredSize(new Dimension(50, 20));
        headSpinner.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent evt) {
                headSpinnerStateChanged(evt);
            }
        });
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        headPanel.add(headSpinner, gridBagConstraints);

        headLabel.setFont(new Font("Moire", 0, 10)); // NOI18N
        headLabel.setText(itemCount[HEAD] + " of " + sectionLimits[HEAD]);
        headLabel.setAlignmentY(0.0F);
        headLabel.setMaximumSize(new Dimension(50, 15));
        headLabel.setMinimumSize(new Dimension(50, 15));
        headLabel.setPreferredSize(new Dimension(50, 15));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        headPanel.add(headLabel, gridBagConstraints);

        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        allocationPanel.add(headPanel, gridBagConstraints);

        centerTorsoPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "CT", TitledBorder.CENTER, TitledBorder.TOP, new Font("Moire", 0, 11))); // NOI18N
        centerTorsoPanel.setFont(new Font("Moire", 0, 11)); // NOI18N
        centerTorsoPanel.setMaximumSize(new Dimension(60, 60));
        centerTorsoPanel.setMinimumSize(new Dimension(60, 60));
        centerTorsoPanel.setLayout(new GridBagLayout());

        centerTorsoSpinner.setFont(new Font("Moire", 0, 10)); // NOI18N
        centerTorsoSpinner.setAlignmentX(0.0F);
        centerTorsoSpinner.setAlignmentY(0.0F);
        centerTorsoSpinner.setMaximumSize(new Dimension(50, 20));
        centerTorsoSpinner.setMinimumSize(new Dimension(50, 20));
        centerTorsoSpinner.setPreferredSize(new Dimension(50, 20));
        centerTorsoSpinner.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent evt) {
                centerTorsoSpinnerStateChanged(evt);
            }
        });
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        centerTorsoPanel.add(centerTorsoSpinner, gridBagConstraints);

        centerTorsoLabel.setFont(new Font("Moire", 0, 10)); // NOI18N
        centerTorsoLabel.setText(itemCount[CENTER_TORSO] + " of " + sectionLimits[CENTER_TORSO]);
        centerTorsoLabel.setAlignmentY(0.0F);
        centerTorsoLabel.setMaximumSize(new Dimension(50, 15));
        centerTorsoLabel.setMinimumSize(new Dimension(50, 15));
        centerTorsoLabel.setPreferredSize(new Dimension(50, 15));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        centerTorsoPanel.add(centerTorsoLabel, gridBagConstraints);

        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        allocationPanel.add(centerTorsoPanel, gridBagConstraints);

        rightLegPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "RL", TitledBorder.CENTER, TitledBorder.TOP, new Font("Moire", 0, 11))); // NOI18N
        rightLegPanel.setFont(new Font("Moire", 0, 11)); // NOI18N
        rightLegPanel.setMaximumSize(new Dimension(60, 60));
        rightLegPanel.setMinimumSize(new Dimension(60, 60));
        rightLegPanel.setLayout(new GridBagLayout());

        rightLegSpinner.setFont(new Font("Moire", 0, 10)); // NOI18N
        rightLegSpinner.setAlignmentX(0.0F);
        rightLegSpinner.setAlignmentY(0.0F);
        rightLegSpinner.setMaximumSize(new Dimension(50, 20));
        rightLegSpinner.setMinimumSize(new Dimension(50, 20));
        rightLegSpinner.setPreferredSize(new Dimension(50, 20));
        rightLegSpinner.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent evt) {
                rightLegSpinnerStateChanged(evt);
            }
        });
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        rightLegPanel.add(rightLegSpinner, gridBagConstraints);

        rightLegLabel.setFont(new Font("Moire", 0, 10)); // NOI18N
        rightLegLabel.setText(itemCount[RIGHT_LEG] + " of " + sectionLimits[RIGHT_LEG]);
        rightLegLabel.setAlignmentY(0.0F);
        rightLegLabel.setMaximumSize(new Dimension(50, 15));
        rightLegLabel.setMinimumSize(new Dimension(50, 15));
        rightLegLabel.setPreferredSize(new Dimension(50, 15));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        rightLegPanel.add(rightLegLabel, gridBagConstraints);

        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        allocationPanel.add(rightLegPanel, gridBagConstraints);

        leftArmPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "LA", TitledBorder.CENTER, TitledBorder.TOP, new Font("Moire", 0, 11))); // NOI18N
        leftArmPanel.setFont(new Font("Moire", 0, 11)); // NOI18N
        leftArmPanel.setLayout(new GridBagLayout());

        leftArmSpinner.setFont(new Font("Moire", 0, 10)); // NOI18N
        leftArmSpinner.setAlignmentX(0.0F);
        leftArmSpinner.setAlignmentY(0.0F);
        leftArmSpinner.setMaximumSize(new Dimension(50, 20));
        leftArmSpinner.setMinimumSize(new Dimension(50, 20));
        leftArmSpinner.setPreferredSize(new Dimension(50, 20));
        leftArmSpinner.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent evt) {
                leftArmSpinnerStateChanged(evt);
            }
        });
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        leftArmPanel.add(leftArmSpinner, gridBagConstraints);

        leftArmLabel.setFont(new Font("Moire", 0, 10)); // NOI18N
        leftArmLabel.setText(itemCount[LEFT_ARM] + " of " + sectionLimits[LEFT_ARM]);
        leftArmLabel.setAlignmentY(0.0F);
        leftArmLabel.setMaximumSize(new Dimension(50, 15));
        leftArmLabel.setMinimumSize(new Dimension(50, 15));
        leftArmLabel.setPreferredSize(new Dimension(50, 15));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        leftArmPanel.add(leftArmLabel, gridBagConstraints);

        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        allocationPanel.add(leftArmPanel, gridBagConstraints);

        leftLegPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "LL", TitledBorder.CENTER, TitledBorder.TOP, new Font("Moire", 0, 11))); // NOI18N
        leftLegPanel.setFont(new Font("Moire", 0, 11)); // NOI18N
        leftLegPanel.setMaximumSize(new Dimension(60, 60));
        leftLegPanel.setMinimumSize(new Dimension(60, 60));
        leftLegPanel.setLayout(new GridBagLayout());

        leftLegSpinner.setFont(new Font("Moire", 0, 10)); // NOI18N
        leftLegSpinner.setAlignmentX(0.0F);
        leftLegSpinner.setAlignmentY(0.0F);
        leftLegSpinner.setMaximumSize(new Dimension(50, 20));
        leftLegSpinner.setMinimumSize(new Dimension(50, 20));
        leftLegSpinner.setPreferredSize(new Dimension(50, 20));
        leftLegSpinner.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent evt) {
                leftLegSpinnerStateChanged(evt);
            }
        });
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        leftLegPanel.add(leftLegSpinner, gridBagConstraints);

        leftLegLabel.setFont(new Font("Moire", 0, 10)); // NOI18N
        leftLegLabel.setText(itemCount[LEFT_LEG] + " of " + sectionLimits[LEFT_LEG]);
        leftLegLabel.setAlignmentY(0.0F);
        leftLegLabel.setMaximumSize(new Dimension(50, 15));
        leftLegLabel.setMinimumSize(new Dimension(50, 15));
        leftLegLabel.setPreferredSize(new Dimension(50, 15));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        leftLegPanel.add(leftLegLabel, gridBagConstraints);

        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        allocationPanel.add(leftLegPanel, gridBagConstraints);

        rightArmPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "RA", TitledBorder.CENTER, TitledBorder.TOP, new Font("Moire", 0, 11))); // NOI18N
        rightArmPanel.setFont(new Font("Moire", 0, 11)); // NOI18N
        rightArmPanel.setLayout(new GridBagLayout());

        rightArmSpinner.setFont(new Font("Moire", 0, 10)); // NOI18N
        rightArmSpinner.setAlignmentX(0.0F);
        rightArmSpinner.setAlignmentY(0.0F);
        rightArmSpinner.setMaximumSize(new Dimension(50, 20));
        rightArmSpinner.setMinimumSize(new Dimension(50, 20));
        rightArmSpinner.setPreferredSize(new Dimension(50, 20));
        rightArmSpinner.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent evt) {
                rightArmSpinnerStateChanged(evt);
            }
        });
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        rightArmPanel.add(rightArmSpinner, gridBagConstraints);

        rightArmLabel.setFont(new Font("Moire", 0, 10)); // NOI18N
        rightArmLabel.setText(itemCount[RIGHT_ARM] + " of " + sectionLimits[RIGHT_ARM]);
        rightArmLabel.setAlignmentY(0.0F);
        rightArmLabel.setMaximumSize(new Dimension(50, 15));
        rightArmLabel.setMinimumSize(new Dimension(50, 15));
        rightArmLabel.setPreferredSize(new Dimension(50, 15));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        rightArmPanel.add(rightArmLabel, gridBagConstraints);

        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        allocationPanel.add(rightArmPanel, gridBagConstraints);

        rightTorsoPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "RT", TitledBorder.CENTER, TitledBorder.TOP, new Font("Moire", 0, 11))); // NOI18N
        rightTorsoPanel.setFont(new Font("Moire", 0, 11)); // NOI18N
        rightTorsoPanel.setMaximumSize(new Dimension(60, 60));
        rightTorsoPanel.setMinimumSize(new Dimension(60, 60));
        rightTorsoPanel.setPreferredSize(new Dimension(60, 60));
        rightTorsoPanel.setLayout(new GridBagLayout());

        rightTorsoSpinner.setFont(new Font("Moire", 0, 10)); // NOI18N
        rightTorsoSpinner.setAlignmentX(0.0F);
        rightTorsoSpinner.setAlignmentY(0.0F);
        rightTorsoSpinner.setMaximumSize(new Dimension(50, 20));
        rightTorsoSpinner.setMinimumSize(new Dimension(50, 20));
        rightTorsoSpinner.setPreferredSize(new Dimension(50, 20));
        rightTorsoSpinner.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent evt) {
                rightTorsoSpinnerStateChanged(evt);
            }
        });
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        rightTorsoPanel.add(rightTorsoSpinner, gridBagConstraints);

        rightTorsoLabel.setFont(new Font("Moire", 0, 10)); // NOI18N
        rightTorsoLabel.setText(itemCount[RIGHT_TORSO] + " of " + sectionLimits[RIGHT_TORSO]);
        rightTorsoLabel.setAlignmentY(0.0F);
        rightTorsoLabel.setMaximumSize(new Dimension(50, 15));
        rightTorsoLabel.setMinimumSize(new Dimension(50, 15));
        rightTorsoLabel.setPreferredSize(new Dimension(50, 15));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        rightTorsoPanel.add(rightTorsoLabel, gridBagConstraints);

        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        allocationPanel.add(rightTorsoPanel, gridBagConstraints);

        leftTorsoPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "LT", TitledBorder.CENTER, TitledBorder.TOP, new Font("Moire", 0, 11))); // NOI18N
        leftTorsoPanel.setFont(new Font("Moire", 0, 11)); // NOI18N
        leftTorsoPanel.setMaximumSize(new Dimension(60, 60));
        leftTorsoPanel.setMinimumSize(new Dimension(60, 60));
        leftTorsoPanel.setLayout(new GridBagLayout());

        leftTorsoSpinner.setFont(new Font("Moire", 0, 10)); // NOI18N
        leftTorsoSpinner.setAlignmentX(0.0F);
        leftTorsoSpinner.setAlignmentY(0.0F);
        leftTorsoSpinner.setMaximumSize(new Dimension(50, 20));
        leftTorsoSpinner.setMinimumSize(new Dimension(50, 20));
        leftTorsoSpinner.setPreferredSize(new Dimension(50, 20));
        leftTorsoSpinner.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent evt) {
                leftTorsoSpinnerStateChanged(evt);
            }
        });
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        leftTorsoPanel.add(leftTorsoSpinner, gridBagConstraints);

        leftTorsoLabel.setFont(new Font("Moire", 0, 10)); // NOI18N
        leftTorsoLabel.setText(itemCount[LEFT_TORSO] + " of " + sectionLimits[LEFT_TORSO]);
        leftTorsoLabel.setAlignmentY(0.0F);
        leftTorsoLabel.setMaximumSize(new Dimension(50, 15));
        leftTorsoLabel.setMinimumSize(new Dimension(50, 15));
        leftTorsoLabel.setPreferredSize(new Dimension(50, 15));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        leftTorsoPanel.add(leftTorsoLabel, gridBagConstraints);

        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        allocationPanel.add(leftTorsoPanel, gridBagConstraints);

        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        getContentPane().add(allocationPanel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        if (nParent == null) {
            for (int i = 0; i < NUMBER_OF_CRITICAL_SECTIONS; i++)
                for (int j = 0; j < itemCount[i]; j++)
                {
                    Parent.removeItem(k);
                    items[i].add(item);
                    criticals[i] -= item.getCriticals();
                }
            Parent.loadCriticals();
            Parent.updateItemList();
        }
        else {
            for (int i = 0; i < NUMBER_OF_CRITICAL_SECTIONS; i++)
                for (int j = 0; j < itemCount[i]; j++)
                {
                    nParent.removeItem(k);
                    items[i].add(item);
                    criticals[i] -= item.getCriticals();
                }
            nParent.loadCriticals();
            nParent.updateItemList();
        }
        dispose();
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void headSpinnerStateChanged(ChangeEvent evt) {//GEN-FIRST:event_headSpinnerStateChanged
        int temp = itemCount[HEAD];
        itemCount[HEAD] = Integer.parseInt(headSpinner.getValue().toString());
        if (itemTotal + (itemCount[HEAD] - temp) > itemLimit)
        {
            itemCount[HEAD] = temp;
            headSpinner.setValue(temp);
        }
        else
            itemTotal += (itemCount[HEAD] - temp); 
        
        headLabel.setText(itemCount[HEAD] + " of " + sectionLimits[HEAD]);
        allocatedTotalLabel.setText(itemTotal + " of " + itemLimit + " Allocated");
    }//GEN-LAST:event_headSpinnerStateChanged

    private void leftTorsoSpinnerStateChanged(ChangeEvent evt) {//GEN-FIRST:event_leftTorsoSpinnerStateChanged
        int temp = itemCount[LEFT_TORSO];
        itemCount[LEFT_TORSO] = Integer.parseInt(leftTorsoSpinner.getValue().toString());
        if (itemTotal + (itemCount[LEFT_TORSO] - temp) > itemLimit)
        {
            itemCount[LEFT_TORSO] = temp;
            leftTorsoSpinner.setValue(temp);
        }
        else
            itemTotal += (itemCount[LEFT_TORSO] - temp); 
        
        leftTorsoLabel.setText(itemCount[LEFT_TORSO] + " of " + sectionLimits[LEFT_TORSO]);
        allocatedTotalLabel.setText(itemTotal + " of " + itemLimit + " Allocated");
    }//GEN-LAST:event_leftTorsoSpinnerStateChanged

    private void rightTorsoSpinnerStateChanged(ChangeEvent evt) {//GEN-FIRST:event_rightTorsoSpinnerStateChanged
        int temp = itemCount[RIGHT_TORSO];
        itemCount[RIGHT_TORSO] = Integer.parseInt(rightTorsoSpinner.getValue().toString());
        if (itemTotal + (itemCount[RIGHT_TORSO] - temp) > itemLimit)
        {
            itemCount[RIGHT_TORSO] = temp;
            rightTorsoSpinner.setValue(temp);
        }
        else
            itemTotal += (itemCount[RIGHT_TORSO] - temp); 
        
        rightTorsoLabel.setText(itemCount[RIGHT_TORSO] + " of " + sectionLimits[RIGHT_TORSO]);
        allocatedTotalLabel.setText(itemTotal + " of " + itemLimit + " Allocated");
    }//GEN-LAST:event_rightTorsoSpinnerStateChanged

    private void centerTorsoSpinnerStateChanged(ChangeEvent evt) {//GEN-FIRST:event_centerTorsoSpinnerStateChanged
        int temp = itemCount[CENTER_TORSO];
        itemCount[CENTER_TORSO] = Integer.parseInt(centerTorsoSpinner.getValue().toString());
        if (itemTotal + (itemCount[CENTER_TORSO] - temp) > itemLimit)
        {
            itemCount[CENTER_TORSO] = temp;
            centerTorsoSpinner.setValue(temp);
        }
        else
            itemTotal += (itemCount[CENTER_TORSO] - temp); 
        
        centerTorsoLabel.setText(itemCount[CENTER_TORSO] + " of " + sectionLimits[CENTER_TORSO]);
        allocatedTotalLabel.setText(itemTotal + " of " + itemLimit + " Allocated");
    }//GEN-LAST:event_centerTorsoSpinnerStateChanged

    private void rightArmSpinnerStateChanged(ChangeEvent evt) {//GEN-FIRST:event_rightArmSpinnerStateChanged
        int temp = itemCount[RIGHT_ARM];
        itemCount[RIGHT_ARM] = Integer.parseInt(rightArmSpinner.getValue().toString());
        if (itemTotal + (itemCount[RIGHT_ARM] - temp) > itemLimit)
        {
            itemCount[RIGHT_ARM] = temp;
            rightArmSpinner.setValue(temp);
        }
        else
            itemTotal += (itemCount[RIGHT_ARM] - temp); 
        
        rightArmLabel.setText(itemCount[RIGHT_ARM] + " of " + sectionLimits[RIGHT_ARM]);
        allocatedTotalLabel.setText(itemTotal + " of " + itemLimit + " Allocated");
        
    }//GEN-LAST:event_rightArmSpinnerStateChanged

    private void leftArmSpinnerStateChanged(ChangeEvent evt) {//GEN-FIRST:event_leftArmSpinnerStateChanged
        int temp = itemCount[LEFT_ARM];
        itemCount[LEFT_ARM] = Integer.parseInt(leftArmSpinner.getValue().toString());
        if (itemTotal + (itemCount[LEFT_ARM] - temp) > itemLimit)
        {
            itemCount[LEFT_ARM] = temp;
            leftArmSpinner.setValue(temp);
        }
        else
            itemTotal += (itemCount[LEFT_ARM] - temp); 
        
        leftArmLabel.setText(itemCount[LEFT_ARM] + " of " + sectionLimits[LEFT_ARM]);
        allocatedTotalLabel.setText(itemTotal + " of " + itemLimit + " Allocated");
    }//GEN-LAST:event_leftArmSpinnerStateChanged

    private void rightLegSpinnerStateChanged(ChangeEvent evt) {//GEN-FIRST:event_rightLegSpinnerStateChanged
        int temp = itemCount[RIGHT_LEG];
        itemCount[RIGHT_LEG] = Integer.parseInt(rightLegSpinner.getValue().toString());
        if (itemTotal + (itemCount[RIGHT_LEG] - temp) > itemLimit)
        {
            itemCount[RIGHT_LEG] = temp;
            rightLegSpinner.setValue(temp);
        }
        else
            itemTotal += (itemCount[RIGHT_LEG] - temp); 
        
        rightLegLabel.setText(itemCount[RIGHT_LEG] + " of " + sectionLimits[RIGHT_LEG]);
        allocatedTotalLabel.setText(itemTotal + " of " + itemLimit + " Allocated");
    }//GEN-LAST:event_rightLegSpinnerStateChanged

    private void leftLegSpinnerStateChanged(ChangeEvent evt) {//GEN-FIRST:event_leftLegSpinnerStateChanged
        int temp = itemCount[LEFT_LEG];
        itemCount[LEFT_LEG] = Integer.parseInt(leftLegSpinner.getValue().toString());
        if (itemTotal + (itemCount[LEFT_LEG] - temp) > itemLimit)
        {
            itemCount[LEFT_LEG] = temp;
            leftLegSpinner.setValue(temp);
        }
        else
            itemTotal += (itemCount[LEFT_LEG] - temp); 
        
        leftLegLabel.setText(itemCount[LEFT_LEG] + " of " + sectionLimits[LEFT_LEG]);
        allocatedTotalLabel.setText(itemTotal + " of " + itemLimit + " Allocated");
    }//GEN-LAST:event_leftLegSpinnerStateChanged
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JLabel allocatedEquipmentLabel;
    private JLabel allocatedTotalLabel;
    private JPanel allocationPanel;
    private JPanel buttonPanel;
    private JButton cancelButton;
    private JLabel centerTorsoLabel;
    private JPanel centerTorsoPanel;
    private JSpinner centerTorsoSpinner;
    private JLabel headLabel;
    private JPanel headPanel;
    private JSpinner headSpinner;
    private JLabel leftArmLabel;
    private JPanel leftArmPanel;
    private JSpinner leftArmSpinner;
    private JLabel leftLegLabel;
    private JPanel leftLegPanel;
    private JSpinner leftLegSpinner;
    private JLabel leftTorsoLabel;
    private JPanel leftTorsoPanel;
    private JSpinner leftTorsoSpinner;
    private JButton okButton;
    private JLabel rightArmLabel;
    private JPanel rightArmPanel;
    private JSpinner rightArmSpinner;
    private JLabel rightLegLabel;
    private JPanel rightLegPanel;
    private JSpinner rightLegSpinner;
    private JLabel rightTorsoLabel;
    private JPanel rightTorsoPanel;
    private JSpinner rightTorsoSpinner;
    private JPanel titlePanel;
    // End of variables declaration//GEN-END:variables
}
